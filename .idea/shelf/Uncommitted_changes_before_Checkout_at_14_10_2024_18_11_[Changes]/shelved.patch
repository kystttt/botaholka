Index: src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.telegram.telegrambots.longpolling.TelegramBotsLongPollingApplication;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        ListOfOrders listOfOrders = ListOfOrders.INSTANCE;\r\n        UsersState usersState = UsersState.INSTANCE;\r\n\r\n        String botToken = System.getenv(\"TG_TOKEN\");\r\n        try (TelegramBotsLongPollingApplication botsApplication = new TelegramBotsLongPollingApplication()) {\r\n            botsApplication.registerBot(botToken, new TGBot(botToken));\r\n            Thread.currentThread().join();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Main.java b/src/main/java/Main.java
--- a/src/main/java/Main.java	(revision 14306b52557e286e129a1c6fddfbd5c8bc3e8b49)
+++ b/src/main/java/Main.java	(date 1728376015116)
@@ -3,7 +3,7 @@
 public class Main {
     public static void main(String[] args) {
         ListOfOrders listOfOrders = ListOfOrders.INSTANCE;
-        UsersState usersState = UsersState.INSTANCE;
+        //UsersState usersState = UsersState.INSTANCE;
 
         String botToken = System.getenv("TG_TOKEN");
         try (TelegramBotsLongPollingApplication botsApplication = new TelegramBotsLongPollingApplication()) {
Index: src/main/java/TextHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.json.simple.JSONObject;\r\nimport org.json.simple.parser.JSONParser;\r\nimport org.json.simple.parser.ParseException;\r\n\r\n\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.Objects;\r\n\r\n/**\r\n * Класс, методы которого обрабатывают текст\r\n */\r\npublic class TextHandler {\r\n\r\n    final String START_CONST = \"\"\"\r\n                                Добро пожаловать в бота\r\n                                \"\"\";\r\n    final String ERROR_BRANCH = \"\"\"\r\n            В качестве кого вы бы хотели продолжить?\r\n            /seller - продавец\r\n            /buyer - покупатель\r\n            \"\"\";\r\n    final String HELP_CONST = \"\"\"\r\n            Этот бот возвращает отправленное сообщение,\r\n            Список команд:\r\n            /help - Навигация по командам бота\r\n            /start - приветсвие пользователя\r\n            /menu - меню для выбора блюда\r\n            /cart - посмотреть корзину\r\n            /delete - удалить товар из корзины\r\n            /listoforders - просмотр текущих заказов\r\n            /duplicate-{“Номер заказа”} - повторить заказ\r\n            /cancel-{“Номер заказа”} - отменить заказ\r\n            \"\"\";\r\n              \r\n    private final String ECHO_CONST = \"Вы ввели: \";\r\n    private String output_message = \"\";\r\n    private final String MENU_CONST = \"Меню: \\n\";\r\n    private final String CHOOSE_CONST = \"Введите номер того, что хотите заказать: \";\r\n    private final String ERROR_TYPE_CONST = \"Ошибка: индекс блюда должен быть числом.\";\r\n    private final String DISH_ADDED_CONST = \"Блюдо добавлено в корзину:\\n\";\r\n    private final String ERROR_UNDEFIND_NUM_CONST = \"Ошибка: такого блюда нет в меню.\";\r\n    private final String SUCCES_DELETE_DISH_CONST = \"Блюдо успешно удалено \";\r\n    private final String CART_EMPTY_CONST = \"Корзина пуста.\";\r\n    private final String YOUR_ORDER_CONST = \"Ваш заказ:\\n\";\r\n    private final String DELETE_OUT_MSG_CONST = \"Введите номер блюда, которое хотите удалить: \";\r\n    private final String FUNCS_FOR_LIST_OF_ORDERS_BUYER = \"\"\"\r\n            Ваши функции:\r\n            /duplicate-{“Номер заказа”} - повторить заказ\r\n            /cancel-{“Номер заказа”} - отменить заказ\r\n            \"\"\";\r\n\r\n    MenuList mnlst = MenuList.INSTANCE;\r\n\r\n    /**\r\n     * Метод, который вызывает меню, в котором показывается\r\n     * порядковый номер блюда в меню, название блюда, а также его стоимость\r\n     */\r\n    public void menuCalling() {\r\n        MenuList mnlst = MenuList.INSTANCE;\r\n        try {\r\n            JSONParser parser = new JSONParser();\r\n            JSONObject jsonObject = (JSONObject) parser.parse(new FileReader(\"src/main/resources/menu.json\"));\r\n            StringBuilder menuBuilder = new StringBuilder(MENU_CONST);\r\n\r\n            Iterator<String> keys = jsonObject.keySet().iterator();\r\n            int index = 1;\r\n            while (keys.hasNext()) {\r\n                String name = keys.next();\r\n                Long cost = (Long) jsonObject.get(name);\r\n                mnlst.getMenulist().put(index, name + \" - \" + cost + \" рублей\");\r\n                menuBuilder.append(index).append(\". \").append(name).append(\" - \").append(cost).append(\" рублей\\n\");\r\n                index++;\r\n            }\r\n            menuBuilder.append(CHOOSE_CONST);\r\n            output_message = menuBuilder.toString();\r\n\r\n\r\n        } catch (IOException | ParseException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Метод, который добавляет по индексу (первому числу) товар в корзину\r\n     * @param dishIndexStr\r\n     */\r\n    public void addToCart(String dishIndexStr) {\r\n        try {\r\n            int dishIndex = Integer.parseInt(dishIndexStr);\r\n            if (mnlst.getMenulist().containsKey(dishIndex)) {\r\n                String dishDetails = dishIndexStr + \". \" + mnlst.getMenulist().get(dishIndex); // Получаем детали блюда\r\n                mnlst.addToCart(dishDetails);\r\n                output_message = DISH_ADDED_CONST + dishDetails;\r\n            } else {\r\n                output_message = ERROR_UNDEFIND_NUM_CONST;\r\n            }\r\n        } catch (NumberFormatException e) {\r\n            output_message = ERROR_TYPE_CONST;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Метод, который показывает корзину покупателя, список заказа.\r\n     */\r\n    public void viewCart() {\r\n        if (mnlst.getCartSize() == 0) {\r\n            output_message = CART_EMPTY_CONST;\r\n            return;\r\n        }\r\n        StringBuilder cartContents = new StringBuilder(YOUR_ORDER_CONST);\r\n        ArrayList<String> cartItems = mnlst.getCart();\r\n        for (int i = 0; i < cartItems.size(); i++) {\r\n            cartContents.append(i).append(\". \").append(cartItems.get(i)).append(\"\\n\");\r\n        }\r\n\r\n        output_message = cartContents.toString();\r\n    }\r\n\r\n    /**\r\n     * Метод, который удаляет из корзины блюдо\r\n     * @param dishIndexStr\r\n     */\r\n    public void deleteFromCart(String dishIndexStr){\r\n\r\n        try {\r\n            int idx = Integer.parseInt(dishIndexStr);\r\n            if (idx >= 0 && idx < mnlst.getCartSize()) {\r\n                mnlst.removeFromCart(idx); // Удаляем элемент из корзины через метод\r\n                output_message = SUCCES_DELETE_DISH_CONST;\r\n            } else {\r\n                output_message = ERROR_UNDEFIND_NUM_CONST;\r\n            }\r\n        } catch (NumberFormatException e) {\r\n            output_message = ERROR_TYPE_CONST;\r\n        }\r\n    }\r\n\r\n    private void commandEcho(String str){\r\n        output_message = ECHO_CONST + str;\r\n    }\r\n\r\n\r\n    /**\r\n     * Команда /start в боте\r\n     */\r\n    private void commandStart(){\r\n        output_message = START_CONST;\r\n    }\r\n\r\n    /**\r\n     * Команда /help в боте\r\n     */\r\n     private void commandHelp(){\r\n        output_message = HELP_CONST;\r\n     }\r\n\r\n    private void commandWrongTypoWord(){\r\n        output_message = \"Введите корректную команду, для списка всех команд - /help\";\r\n    }\r\n\r\n     public void commandListOfOrders(Long chat_id){\r\n         output_message = \"Ваши заказы:\\n\";\r\n         int i = 1;\r\n         ListOfOrders listOfOrders = ListOfOrders.INSTANCE;\r\n         for(Integer key : listOfOrders.getHashMap().keySet()){\r\n             if(Objects.equals(listOfOrders.getHashMap().get(key).getChatId(), chat_id)){\r\n                 output_message += listOfOrders.getHashMap().get(key).formMessageForClient();\r\n                 output_message += \"\\n\";\r\n             }\r\n         }\r\n         output_message += FUNCS_FOR_LIST_OF_ORDERS_BUYER;\r\n     }\r\n\r\n    /**\r\n     * геттер для output_message\r\n     * @return возвращает output_message\r\n     */\r\n    public String getOutputMassage(){\r\n         return output_message;\r\n     }\r\n    \r\n    /**\r\n     * Удаляет заказ по его id\r\n     */\r\n    private void commandDuplicate(String messageText) {\r\n        ListOfOrders listOfOrders = ListOfOrders.INSTANCE;\r\n        for(Integer key : listOfOrders.getHashMap().keySet()) {\r\n            if(messageText.endsWith( Long.toString(listOfOrders.getHashMap().get(key).getChatId()))){\r\n                listOfOrders.putOrder(listOfOrders.getHashMap().get(key));\r\n                output_message = \"Заказ №\" + listOfOrders.getHashMap().get(key).getChatId() + \" продублирован \";\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n  \r\n      /**\r\n     * Реализует логику бота\r\n     * @param message_text переменная с текстом сообщения пользователя\r\n     */\r\n     public void logic(String message_text, Long chat_id) throws IOException, ParseException {\r\n         switch (message_text) {\r\n             case (\"/help\"):\r\n                 commandHelp();\r\n                 mnlst.setPrevCommand(message_text);\r\n                 break;\r\n\r\n             case (\"/start\"):\r\n                 commandStart();\r\n                 mnlst.setPrevCommand(message_text);\r\n                 break;\r\n\r\n             case(\"/order\"):\r\n                 commandOrder(chat_id);\r\n                 mnlst.setPrevCommand(message_text);\r\n                 break;\r\n\r\n             case(\"/menu\"):\r\n                 menuCalling();\r\n                 mnlst.setPrevCommand(message_text);\r\n                 break;\r\n\r\n             case(\"/delete\"):\r\n                 output_message = DELETE_OUT_MSG_CONST;\r\n                 mnlst.setPrevCommand(message_text);\r\n                 break;\r\n            \r\n             case(\"/listoforders\"):\r\n                commandListOfOrders(chat_id);\r\n                break;\r\n             \r\n             case(\"/cart\"):\r\n                 viewCart();\r\n                 mnlst.setPrevCommand(message_text);\r\n                 break;\r\n\r\n             default:\r\n                 boolean isInt = false;\r\n\r\n                 try {\r\n                     Integer.parseInt(message_text);\r\n                     isInt = true;\r\n                 } catch (NumberFormatException e) {\r\n\r\n                 }\r\n                 mnlst.setPrevCommand(isInt ? mnlst.getPrevCommand() : message_text);\r\n\r\n                 if (Objects.equals(mnlst.getPrevCommand(), \"/menu\")){\r\n                     addToCart(message_text);\r\n                 }\r\n                 else if (Objects.equals(mnlst.getPrevCommand(), \"/delete\")){\r\n                     deleteFromCart(message_text);\r\n                 }\r\n                 else if (message_text.startsWith(\"/duplicate-\")) {\r\n                    commandDuplicate(message_text);\r\n                }\r\n                else if(message_text.startsWith(\"/delete-\")){\r\n                    commandDeleteOrder(message_text);\r\n                }\r\n                 else{\r\n                     output_message = ERROR_TYPE_CONST;\r\n                 }\r\n                 break;\r\n\r\n         }\r\n     }\r\n\r\n\r\n    /**\r\n     * Повторяет заказ по его id\r\n     */\r\n    private void commandDeleteOrder(String messageText) {\r\n        ListOfOrders listOfOrders = ListOfOrders.INSTANCE;\r\n        for(Integer key : listOfOrders.getHashMap().keySet()) {\r\n            if(messageText.endsWith( Long.toString(listOfOrders.getHashMap().get(key).getChatId()))){\r\n                listOfOrders.removeById(listOfOrders.getHashMap().get(key).getOrder_id());\r\n                output_message = \"Заказ №\" + listOfOrders.getHashMap().get(key).getChatId() + \" удалён \";\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/TextHandler.java b/src/main/java/TextHandler.java
--- a/src/main/java/TextHandler.java	(revision 14306b52557e286e129a1c6fddfbd5c8bc3e8b49)
+++ b/src/main/java/TextHandler.java	(date 1728377400853)
@@ -215,7 +215,7 @@
                  break;
 
              case("/order"):
-                 commandOrder(chat_id);
+                 //commandOrder(chat_id);
                  mnlst.setPrevCommand(message_text);
                  break;
 
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_22\" default=\"true\" project-jdk-name=\"openjdk-22\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 14306b52557e286e129a1c6fddfbd5c8bc3e8b49)
+++ b/.idea/misc.xml	(date 1728376015289)
@@ -8,5 +8,5 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="openjdk-22" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
